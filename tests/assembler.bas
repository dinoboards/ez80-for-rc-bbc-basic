   10 REM EZ80 ASSEMBLER TESTS
   15 :
   20 REM Author: Dean Belfield
   25 REM Based upon information in http://www.z80.info/decoding.htm 
   30 :
   40 DIM CODE% 16
   50 ADL%=1
   60 P%=CODE%
   70 OSCLI("ASM ADL "+STR$(ADL%))
   80 DIM R$(7),RP1$(3),RP2$(3),CC$(7),ALU$(7),ROT$(7)
   90 :
  100 DATA "B","C","D","E","H","L","(HL)","A"
  110 DATA "BC","DE","HL","SP"
  120 DATA "BC","DE","HL","AF"
  130 DATA "NZ","Z","NC","C","PO","PE","P","M"
  140 DATA "ADD A,","ADC A,","SUB","SBC A,","AND","XOR","OR","CP"
  150 DATA "RLC","RRC","RL","RR","SLA","SRA","SLL","SRL"
  190 :
  200 FOR I%=0 TO 7:READ R$(I%):NEXT
  210 FOR I%=0 TO 3:READ RP1$(I%):NEXT
  220 FOR I%=0 TO 3:READ RP2$(I%):NEXT
  230 FOR I%=0 TO 7:READ CC$(I%):NEXT
  240 FOR I%=0 TO 7:READ ALU$(I%):NEXT
  250 FOR I%=0 TO 7:READ ROT$(I%):NEXT
  990 :
 1000 PROCtestMISC
 1010 PROCtestLD8
 1020 PROCtestLD16
 1030 PROCtestINC8
 1040 PROCtestINC16
 1050 PROCtestPUSH
 1060 PROCtestRST
 1070 PROCtestRET
 1080 PROCtestJP
 1090 PROCtestCALL
 1100 PROCtestALU8
 1110 PROCtestALU16
 1120 PROCtestROT
 1130 PROCtestBIT(1,"BIT")
 1140 PROCtestBIT(2,"RES")
 1150 PROCtestBIT(3,"SET")
 1160 PROCtestTST
 1170 PROCtestOUT
 1180 PROCtestED
 9970 :
 9980 STOP
 9990 :
10000 DEF PROCtestBIT(x%,opcode$)
10010 FOR z%=0 TO 7
10020   FOR y%=0 TO 7
10030     o$="CB"+FNhex(FNop1(x%,y%,z%))
10040     PROCasm(o$,opcode$+" "+STR$(y%)+","+R$(z%))
10050   NEXT
10060 NEXT
10070 ENDPROC
10080 :
10090 DEF PROCtestLD8
10100 FOR z%=0 TO 7
10110   FOR y%=0 TO 7
10120     IF z%=6 AND y%=6 THEN GOTO 10140
10130     PROCasm(FNhex(FNop1(1,y%,z%)),"LD "+R$(y%)+","+R$(z%))
10140   NEXT
10150 NEXT
10160 ENDPROC
10170 :
10180 DEF PROCtestLD16
10190 FOR p%=0 TO 3
10200   PROCasm(FNhex(FNop2(0,p%,0,1))+"563412","LD "+RP1$(p%)+",&123456")
10210 NEXT
10240 ENDPROC
10250 :
10260 DEF PROCtestINC8 
10270 FOR y%=0 TO 7
10280   PROCasm(FNhex(FNop1(0,y%,4)),"INC "+R$(y%))
10290   PROCasm(FNhex(FNop1(0,y%,5)),"DEC "+R$(y%))
10300 NEXT
10310 ENDPROC 
11180 :
11190 DEF PROCtestINC16
11200 FOR p%=0 TO 3
11210   PROCasm(FNhex(FNop2(0,p%,0,3)),"INC "+RP1$(p%))
11220   PROCasm(FNhex(FNop2(0,p%,1,3)),"DEC "+RP1$(p%))
11230 NEXT
11240 ENDPROC 
11250 :
11260 DEF PROCtestPUSH 
11270 FOR p%=0 TO 3
11280   PROCasm(FNhex(FNop2(3,p%,0,5)),"PUSH "+RP2$(p%))
11290   PROCasm(FNhex(FNop2(3,p%,0,1)),"POP "+RP2$(p%))
11300 NEXT
11310 ENDPROC
11320 :
11330 DEF PROCtestRST 
11340 FOR y%=0 TO 7
11350   PROCasm(FNhex(FNop1(3,y%,7)),"RST &"+FNhex(y%*8))
11360 NEXT
11370 ENDPROC
11380 :
11390 DEF PROCtestRET
11400 PROCasm("C9","RET")
11410 FOR y%=0 TO 7
11420   PROCasm(FNhex(FNop1(3,y%,0)),"RET "+CC$(y%))
11430 NEXT
11440 ENDPROC
11441 :
11442 DEF PROCtestJP
11443 PROCasm("E9","JP (HL)")
11444 PROCasm("C3563412","JP &123456")
11445 FOR y%=0 TO 7
11450   PROCasm(FNhex(FNop1(3,y%,2))+"563412","JP "+CC$(y%)+",&123456")
11460 NEXT
11470 ENDPROC
11480 :
11490 DEF PROCtestCALL
11500 PROCasm("CD563412", "CALL &123456")
11510 FOR y%=0 TO 7
11520   PROCasm(FNhex(FNop1(3,y%,4))+"563412","CALL "+CC$(y%)+",&123456")
11530 NEXT
11540 ENDPROC
11550 :
11560 DEF PROCtestALU8
11570 FOR y%=0 TO 7
11580   PROCasm(FNhex(FNop1(3,y%,6))+"12",ALU$(y%)+" &12")
11590   FOR z%=0 TO 7
11600     PROCasm(FNhex(FNop1(2,y%,z%)),ALU$(y%)+" "+R$(z%))
11610   NEXT 
11620 NEXT 
11630 ENDPROC
11640 :
11650 DEF PROCtestROT
11660 FOR z%=0 TO 7
11670   FOR y%=0 TO 7
11680     IF y%<>6 THEN PROCasm("CB"+FNhex(FNop1(0,y%,z%)),ROT$(y%)+" "+R$(z%))
11690   NEXT
11700 NEXT
11710 ENDPROC
11720 :
11730 DEF PROCtestALU16 
11740 FOR p%=0 TO 3
11750   PROCasm(FNhex(FNop2(0,p%,1,1)),"ADD HL,"+RP1$(p%))
11760   PROCasm("ED"+FNhex(FNop2(1,p%,0,2)),"SBC HL,"+RP1$(p%))
11770   PROCasm("ED"+FNhex(FNop2(1,p%,1,2)),"ADC HL,"+RP1$(p%))
11780 NEXT
11790 ENDPROC
11800 :
11810 DEF PROCtestTST
11820 FOR y%=0 TO 7
11830   PROCasm("ED"+FNhex(FNop1(0,y%,4)),"TST "+R$(y%))
11840 NEXT
11850 ENDPROC
11860 :
11870 DEF PROCtestOUT
11880 FOR y%=0 TO 7
11885   IF y%=6 THEN GOTO 11910
11890   PROCasm("ED"+FNhex(FNop1(0,y%,0))+"12","IN0 "+R$(y%)+",(&12)")
11900   PROCasm("ED"+FNhex(FNop1(0,y%,1))+"12","OUT0 (&12),"+R$(y%))
11910 NEXT
11920 ENDPROC
11930 :
19990 :
20000 DEF PROCtestMISC
20010 PROCasm("00", "NOP")
20020 PROCasm("07", "RLCA")
20030 PROCasm("08", "EX AF,AF'")
20040 PROCasm("0F", "RRCA")
20050 PROCasm("10FE", ".L1: DJNZ L1")
20060 PROCasm("17", "RLA")
20070 PROCasm("18FE", ".L1: JR L1")
20080 PROCasm("1F", "RRA")
20090 PROCasm("20FE", ".L1: JR NZ,L1")
20100 PROCasm("27", "DAA")
20110 PROCasm("28FE", ".L1: JR Z,L1")
20120 PROCasm("2F", "CPL")
20130 PROCasm("30FE", ".L1: JR NC,L1")
20140 PROCasm("37", "SCF")
20150 PROCasm("38FE", ".L1: JR C,L1")
20160 PROCasm("3F", "CCF")
20170 PROCasm("76", "HALT")
20180 PROCasm("D3FE", "OUT (&FE),A")
20190 PROCasm("D9", "EXX")
20200 PROCasm("DBFE", "IN A,(&FE)")
20210 PROCasm("E3", "EX (SP),HL")
20220 PROCasm("EB", "EX DE,HL")
20230 PROCasm("F3", "DI")
20240 PROCasm("FB", "EI")
20250 ENDPROC
29990 :
30000 DEF PROCtestED 
30010 PROCasm("ED40", "IN B,(C)")
30020 PROCasm("ED41","OUT (C),B")
30040 PROCasm("ED44","NEG")
30050 PROCasm("ED45","RETN")
30060 PROCasm("ED46","IM 0")
30070 PROCasm("ED47","LD I,A")
30080 PROCasm("ED48","IN C,(C)")
30090 PROCasm("ED49","OUT (C),C")
30120 PROCasm("ED4C", "MLT BC")
30130 PROCasm("ED4D","RETI")
30140 PROCasm("ED4F","LD R,A")
30150 PROCasm("ED50","IN D,(C)")
30160 PROCasm("ED51","OUT (C),D")
30180 PROCasm("ED56","IM 1")
30190 PROCasm("ED57","LD A,I")
30200 PROCasm("ED58","IN E,(C)")
30210 PROCasm("ED59","OUT (C),E")
30240 PROCasm("ED5C", "MLT DE")
30250 PROCasm("ED5E","IM 2")
30260 PROCasm("ED5F","LD A,R")
30270 PROCasm("ED60","IN H,(C)")
30280 PROCasm("ED61","OUT (C),H")
30290 PROCasm("ED6D","LD MB,A")
30295 PROCasm("ED6E","LD A,MB")
30300 PROCasm("ED67","RRD")
30310 PROCasm("ED68","IN L,(C)")
30320 PROCasm("ED69","OUT (C),L")
30350 PROCasm("ED6C", "MLT HL")
30360 PROCasm("ED6F","RLD")
30390 PROCasm("ED76","SLP")
30400 PROCasm("ED78","IN A,(C)")
30410 PROCasm("ED7C","MLT SP")
30420 PROCasm("ED7D","STMIX")
30430 PROCasm("ED7E","RSMIX")
30441 PROCasm("ED82","INIM")
30442 PROCasm("ED83","OTIM")
30443 PROCasm("ED84","INI2")
30444 PROCasm("ED8A","INDM")
30445 PROCasm("ED8B","OTDM")
30446 PROCasm("ED8C","IND2")
30447 PROCasm("ED92","INIMR")
30448 PROCasm("ED93","OTIMR")
30449 PROCasm("ED94","INI2R")
30450 PROCasm("ED9A","INDMR")
30451 PROCasm("ED9B","OTDMR")
30452 PROCasm("ED9C","IND2R")
30459 PROCasm("EDA0","LDI")
30460 PROCasm("EDA1","CPI")
30470 PROCasm("EDA2","INI")
30480 PROCasm("EDA3","OUTI")
30485 PROCasm("EDA4","OUTI2")
30490 PROCasm("EDA8","LDD")
30500 PROCasm("EDA9","CPD")
30510 PROCasm("EDAA","IND")
30520 PROCasm("EDAB","OUTD")
30525 PROCasm("EDAC","OUTD2")
30530 PROCasm("EDB0","LDIR")
30540 PROCasm("EDB1","CPIR")
30550 PROCasm("EDB2","INIR")
30560 PROCasm("EDB3","OTIR")
30565 PROCasm("EDB4","OTI2R")
30570 PROCasm("EDB8","LDDR")
30580 PROCasm("EDB9","CPDR")
30590 PROCasm("EDBA","INDR")
30600 PROCasm("EDBB","OTDR")
30605 PROCasm("EDBC","OTD2R")
30610 PROCasm("EDC2","INIRX")
30620 PROCasm("EDC3","OTIRX")
30630 PROCasm("EDCA","INDRX")
30640 PROCasm("EDCB","OTDRX")
30650 ENDPROC
59990 :
60000 DEF PROCasm(output$,asm$)
60010 P%=CODE%
60020 OSCLI("ASM "+asm$)
60030 L%=P%-CODE%:P%=CODE%
60032 IF L%=0 THEN PRINT "ASSEMBLER ERROR: COULD NOT COMPILE "+asm$:STOP
60035 IF L%*2<>LEN(output$) THEN PRINT "LENGTH ERROR: EXPECTED "+output$:STOP
60040 FOR I%=1 TO LEN(output$) STEP 2
60050   H$=MID$(output$,I%,2)
60060   B%=EVAL("&"+H$)
60070   IF B%<>?P% THEN PRINT "OPCODE ERROR: EXPECTED "+output$:STOP
60080   P%=P%+1
60090 NEXT
60100 ENDPROC
60110 :
60120 DEF FNhex(n%)
60130 LOCAL r$
60140 r$=STR$~(n%)
60150 =STRING$(LEN(r$)MOD2,"0")+r$
60160 :
60170 DEF FNop1(x%,y%,z%)
60180 =x%*64+y%*8+z%
60190 :
60200 DEF FNop2(x%,p%,q%,z%)
60210 =FNop1(x%,p%*2+q%,z%)
